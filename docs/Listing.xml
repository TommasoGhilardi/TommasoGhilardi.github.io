<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Tommaso Ghilardi</title>
<link>https://tommasoghilardi.github.io/Listing.html</link>
<atom:link href="https://tommasoghilardi.github.io/Listing.xml" rel="self" type="application/rss+xml"/>
<description>I hold a Ph.D. in developmental science with a strong focus on analyzing complex, real-world data, exploring the stories behind the data, and deriving actionable insights through advanced statistical analysis and computational modeling. I am passionate about sharing knowledge and translating detailed analyses into clear, accessible insights for diverse audiences.</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Mon, 14 Oct 2024 22:13:04 GMT</lastBuildDate>
<item>
  <title>CV</title>
  <link>https://tommasoghilardi.github.io/posts/general/test4.html</link>
  <description><![CDATA[ 




<div class="card text-white bg-dark mb-3 rounded d-flex">
<div class="d-flex justify-content-between align-items-start p-3" style="width: 100%;">
<pre><code>&lt;div&gt;
  &lt;h4 class="card-title"&gt;Primary card title&lt;/h4&gt;
  &lt;p class="card-text"&gt;
    Some quick example text to build on the card title and make up the bulk of the card's content.
  &lt;/p&gt;
&lt;/div&gt;
&lt;i class="bi bi-person-fill" style="font-size: 80px;"&gt;&lt;/i&gt;</code></pre>
</div>
</div>
<div class="card text-black bg-secondary mb-3 rounded d-flex">
<div class="d-flex justify-content-between align-items-start p-3" style="width: 100%;">
<pre><code>&lt;div&gt;
  &lt;h4 class="card-title"&gt;Primary card title&lt;/h4&gt;
  &lt;p class="card-text"&gt;
    Some quick example text to build on the card title and make up the bulk of the card's content.
  &lt;/p&gt;
&lt;/div&gt;
&lt;i class="bi bi-person-fill" style="font-size: 80px; color: #343a40;"&gt;&lt;/i&gt; </code></pre>
</div>
</div>
<div class="card mb-3 rounded">
<div class="card-body">
<pre><code>&lt;h5 class="card-title"&gt;Special title treatment&lt;/h5&gt;
&lt;h6 class="card-subtitle text-muted"&gt;Support card subtitle&lt;/h6&gt;</code></pre>
</div>
<svg xmlns="http://www.w3.org/2000/svg" class="d-block user-select-none" width="100%" height="200" aria-label="Placeholder: Image cap" focusable="false" preserveaspectratio="xMidYMid slice" viewbox="0 0 318 180" style="font-size:1.125rem;text-anchor:middle">
</svg><p><rect width="100%" height="100%" fill="#868e96"></rect> <text x="50%" y="50%" fill="#dee2e6" dy=".3em">Image cap</text></p>

<div class="card-body">
<pre><code>&lt;p class="card-text"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;</code></pre>
</div>
<div class="card-body">
<pre><code>&lt;a href="#" class="card-link"&gt;Card link&lt;/a&gt;
&lt;a href="#" class="card-link"&gt;Another link&lt;/a&gt;</code></pre>
</div>
<div class="card-footer text-muted">
<pre><code>2 days ago</code></pre>
</div>
</div>


<!-- -->


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <guid>https://tommasoghilardi.github.io/posts/general/test4.html</guid>
  <pubDate>Mon, 14 Oct 2024 22:13:04 GMT</pubDate>
</item>
<item>
  <title>Github Desktop</title>
  <link>https://tommasoghilardi.github.io/posts/general/GithubDesktop.html</link>
  <description><![CDATA[ 




<p>So, you’ve started coding and your friend or supervisor suggested creating a repository for your work? Sounds like a smart move! In this tutorial, we’ll explore how to use one of the simplest tools for managing repositories and code on GitHub: GitHub Desktop.</p>
<section id="github" class="level1">
<h1>Github</h1>
<div>
<p><a href="https://github.com/"><img src="https://tommasoghilardi.github.io/posts/general/Images/Github.png" class="img-fluid" style="float: left; margin-right: 15px;" alt="Github logo" width="30"></a></p>
<p>Let’s start with the basics: What exactly is GitHub? Put simply, GitHub is a <strong><em>code hosting platform that focuses on collaboration and version control</em></strong>. But what does that really mean?</p>
</div>
<ol type="1">
<li><p><strong><em>Hosting platform</em></strong>: Think of GitHub as a specialized website where you can upload and store your code.</p></li>
<li><p><strong>Collaboration</strong>: Once your code is on GitHub, you have the option to let others view it. If you choose, they can even contribute to your project, helping improve and refine your code.</p></li>
<li><p><strong>V<em>ersion control</em></strong>: github records every change and modification to your code. This means you or others can check how the code has changed over time and in case can revert the code back to a specific stage</p></li>
</ol>
<p>Ok, now that you know what github is… go and <a href="https://github.com/">make an account</a>!! Come back once you are done!!!</p>
<section id="github-desktop-your-gateway-to-version-control" class="level2">
<h2 class="anchored" data-anchor-id="github-desktop-your-gateway-to-version-control">Github desktop: your gateway to version control</h2>
<p>There are several ways to interact with GitHub and manage your repositories: git command line, GitKraken, GitHub Desktop, or the website interface. For beginners and those seeking simplicity, GitHub Desktop is an excellent choice.</p>
<p><a href="https://github.com/apps/desktop">GitHub Desktop</a> offers a user-friendly approach to handle your basic version control needs. It’s straightforward enough for newcomers yet capable enough for most projects. You can easily clone repositories, commit changes, and manage your work without diving you crazy with complex commands.</p>
<p>While GitHub Desktop is perfect for getting started and handling everyday tasks, more advanced users working on complex projects might eventually explore more powerful tools. For now, let’s focus on GitHub Desktop - it’s the ideal balance of functionality and ease of use for most us.</p>
<p>So go <a href="https://desktop.github.com/download/">download it</a> and get back here!!</p>


<!-- -->

</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Github</category>
  <category>Installation</category>
  <category>Getting started</category>
  <guid>https://tommasoghilardi.github.io/posts/general/GithubDesktop.html</guid>
  <pubDate>Mon, 14 Oct 2024 22:13:04 GMT</pubDate>
  <media:content url="https://tommasoghilardi.github.io/posts/general/Images/Icon.ico" medium="image"/>
</item>
<item>
  <title>Install Python</title>
  <link>https://tommasoghilardi.github.io/posts/general/InstallPython.html</link>
  <description><![CDATA[ 




<p>Python is one of the most popular programming languages out there. I often use Python in our daily work to clean up and analyze data. This tutorial will show you my favorite way to install Python and manage its libraries. There are a few different ways to get Python on your computer, but this is the method I recommend for keeping things simple yet flexible.</p>
<section id="installing-python" class="level1">
<h1>Installing python</h1>
<p>One popular method for installing and managing Python is Anaconda. Anaconda provides a comprehensive distribution that includes Python, numerous scientific libraries, and development tools. It also features a graphical user interface (GUI) called Anaconda Navigator, which allows users to manage environments, packages, and applications visually. However, despite its simplicity and user-friendly interface, Anaconda can be quite resource-intensive, installing many programs and libraries that often go unused.</p>
<p>This is why I prefer <a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a>, a minimalist installer for conda. It’s a streamlined version of Anaconda that includes only the essentials: conda, Python, their dependencies, and a handful of useful packages. This approach gives users more control over their Python environment and consumes less disk space.</p>
<p>But is Miniconda my top choice? Not quite.</p>
<p>While Anaconda and Miniconda are widely adopted (and I’ve used them in the past), I favor a third option: <a href="https://conda-forge.org/miniforge/">Miniforge</a>. Miniforge is essentially Miniconda with two significant advantages:</p>
<ul>
<li><p>It uses conda-forge as the default package channel: <a href="https://conda-forge.org/">Conda-forge</a> prioritizes well-maintained packages that follow best practices, establishing itself as a trustworthy source for Python packages. Its community-driven nature ensures a diverse and up-to-date package ecosystem, making it an invaluable resource for Python developers.</p></li>
<li><p>It comes bundled with mamba: <a href="https://mamba.readthedocs.io/en/latest/index.html">Mamba</a> is a re-implementation of the conda package manager in C++. It provides faster dependency resolution and package installation compared to conda, significantly speeding up environment creation and management tasks.</p></li>
</ul>
<p>Sounds cool right? well for not it may not make too much sense but we will see later why this is cool. Let’s install Miniforge now.</p>
<section id="miniforge" class="level2">
<h2 class="anchored" data-anchor-id="miniforge">Miniforge</h2>
<style>
figcaption {
  text-align: center;
  font-style: italic;  /* Optional for italics */
}
</style>
<p>Ok, lead to <a href="https://conda-forge.org/miniforge/">Miniforge</a> and download the version right for your system. And start the installation process:</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are multiple version you can download. The one you should download is at the end of the page: <strong>Miniforge3</strong></p>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Images/Install_python1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://tommasoghilardi.github.io/posts/general/Images/Install_python1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
<p>Once you press next and accept the conditions the installation program will ask you few questions like so:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Images/Install_python2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://tommasoghilardi.github.io/posts/general/Images/Install_python2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
<p>I suggest to keep the same options I selected but feel free to change them if you know what you are doing.</p>
<p>Perfect press Install and wait for few minutes for the process to finish!! You are done!! What you should have on your system now is this icon:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Images/Icon.ico" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Miniforge Prompt"><img src="https://tommasoghilardi.github.io/posts/general/Images/Icon.ico" class="img-fluid quarto-figure quarto-figure-center figure-img" width="100" alt="Miniforge Prompt"></a></p>
</figure>
</div>
<figcaption>Miniforge Prompt</figcaption>
</figure>
</div>
<p>Now I will show you how to use it!!</p>
</section>
<section id="use-the-miniforge-prompt" class="level2">
<h2 class="anchored" data-anchor-id="use-the-miniforge-prompt">Use the Miniforge Prompt</h2>
<p>Now that you have Miniforge installed and can access its prompt, let’s explore how to use it effectively. Our first step will be to create a new virtual environment. What’s a virtual environment you ask?? Well python has different versions. Sometimes when we create scripts we needs to run a specific version of python because some of our packages may rely on older version of python or we have conflicting dependencies with other packages. Virtual environments keep these dependencies in separate “sandboxes” so you can switch between both applications easily and get them running.</p>
<p>When you open Miniforge, you’ll be presented with a terminal prompt. To create your first environment, simply enter the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> working</span></code></pre></div>
<p>This will create a new environment called (-n) <em><code>working</code></em>.</p>
<p>Once the environment is created, the prompt will inform you that to work in this specific environment, you need to activate it by typing:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate working</span></code></pre></div>
<p>You’ll notice the prompt changes from <code>(base)</code> to <code>(working)</code>, indicating which environment is currently active. Now that you’re in the correct environment, you can install the Python packages you need using <code>mamba install</code> followed by the package name. For example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pandas</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>you can install multiple packages at once by adding them one after the other e.g.&nbsp;<code>mamba install pandas numpy matplotlib</code></p>
</div>
</div>
<p>After a brief moment, the prompt will download the package(s) and their dependencies. It may ask you to confirm the installation by pressing <code>y</code>. A few seconds later, your chosen libraries will be ready for use! This process ensures that you have a clean, isolated environment with exactly the packages you need for your project. Perfect!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Images/EnvCreation.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://tommasoghilardi.github.io/posts/general/Images/EnvCreation.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="500"></a></p>
</figure>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Mamba and Conda
</div>
</div>
<div class="callout-body-container callout-body">
<p>In Miniforge, you have the flexibility to use both mamba and conda commands. In fact, for most operations like creating environments, activating them, and managing your setup, you can use these commands interchangeably. For example:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> myenv</span>
<span id="cb4-2"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb4-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> myenv</span>
<span id="cb4-4"></span>
<span id="cb4-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate myenv</span>
<span id="cb4-6"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or</span></span>
<span id="cb4-7"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate myenv</span></code></pre></div>
<p>Both will work similarly. However, when it comes to installing packages, we recommend using mamba. The reason is simple: mamba is significantly faster at resolving dependencies and installing packages. So, for the best performance, especially with complex environments or large packages, use:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install package_name</span></code></pre></div>
</div>
</div>
<section id="pip" class="level3">
<h3 class="anchored" data-anchor-id="pip">Pip</h3>
<p>While conda-forge is an amazing channel to retrieve your packages not all of them are there…In such cases, pip, probably the most renowned Python package manager, can come to the rescue. You might already be aware of pip, versatility for installing and manage packages in Python. Let’s consider numpy, an exceptional package for array manipulation. With pip, installation is a breeze. Simply use the following command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install numpy</span></code></pre></div>
</section>
</section>
</section>
<section id="ides" class="level1">
<h1>IDEs</h1>
<p>Ok we now have a python environment…but how can we use it??? well you could type <code>python</code> in the miniforge prompt and tyoy you script there… Let’s not be ridiculous we need a proper IDE (An IDE is software that combines commonly used developer tools into a compact GUI application. It is a combination of tools like a code editor, code compiler, and code debugger with an integrated terminal.)</p>
<p>There are a lot of them around Vs Code, Pycharm, Jupyter Notebooks and many more!! So you can pick and choose the one that oyu like the most or that suits your needs the best. I really like Spyder!</p>
<section id="spyder" class="level2">
<h2 class="anchored" data-anchor-id="spyder">Spyder</h2>
<div>
<p><img src="https://tommasoghilardi.github.io/posts/general/Images/Spyder.png" alt="Spyder logo" style="float: right; margin-left: 15px; " width="60"></p>
<p>Spyder is a powerful scientific environment IDE written in Python. Spyder is designed by and for scientists, engineers and data analysts. It integrates very useful functionalities (variable explorer, plotting, etc.) making it our favorite way to write and run python code.</p>
</div>
<section id="command-prompt" class="level3">
<h3 class="anchored" data-anchor-id="command-prompt">Command prompt</h3>
<p>When you install the full version of Anaconda, it installs Spyder for you. However, Miniforge/Miniconda and do not come with Spyder. Fortunately, they do make it easy to install it. In the Miniforge Prompt activate the environment you want Spyder into and then type following command and press the “enter” key:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install spyder</span></code></pre></div>
<p>After thinking a bit, the Anaconda prompt will prepared a bunch of files to download and ask if you’d like to proceed. Go ahead and type “y” and hit “enter” to proceed.</p>
<p>You now should have new icon of Spyder called Spyder 6 ( “your env name” ). For example :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Images/spyder.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Spyder 6 (working)"><img src="https://tommasoghilardi.github.io/posts/general/Images/spyder.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="100" alt="Spyder 6 (working)"></a></p>
</figure>
</div>
<figcaption>Spyder 6 (working)</figcaption>
</figure>
</div>
<p>In case you do not see it…Don’t panic!!! You can always open the miniforge prompt, activate your environment and type <code>spyder</code>. Tada !! done!</p>
</section>
<section id="exe" class="level3">
<h3 class="anchored" data-anchor-id="exe">.exe</h3>
<p>Spyder offers an alternative installation method using a <a href="https://www.spyder-ide.org/download/">standalone file</a>. Simply download the appropriate installation file for your operating system and run it. This approach may seem advantageous as it allows you to install Spyder IDE once, rather than in each environment. You can then switch between different environments through the graphical user interface.</p>
<p>However, this method isn’t as straightforward as it might appear. Any environment you wish to use with Spyder still requires the spyder-kernel package. When you attempt to use Spyder in an environment lacking the spyder-kernel, it will prompt you to install it. You can do this by running <code>mamba install spyder-kernel</code> in the desired environment.</p>
<p>Ultimately, the choice between installation methods depends on your specific needs and preferences.</p>
</section>
</section>
<section id="positron" class="level2">
<h2 class="anchored" data-anchor-id="positron">Positron</h2>
<div>
<p><img src="https://tommasoghilardi.github.io/posts/general/Images/positron.png" alt="Positron logo" style="float: right; margin-left: 15px; width: 60px;"></p>
<p>One other IDE that I’ve recently discovered and been enjoying is Positron. Positron is a next-generation data science IDE. It’s still in active development, so some features may not work perfectly or might change in the future. However, it’s now in public beta, which means you’re welcome to give it a try! The interface and functionality of Positron feel like a hybrid between VS Code and RStudio/Spyder. Given its ongoing development, you might prefer to wait for the official release. That said, it’s already quite functional and supports both Python and R, with the ability to switch between multiple environments.</p>
<p>If you have some time, consider trying Positron out. Your experience could be valuable - don’t hesitate to submit bug reports or feature requests to help improve this promising tool.</p>
</div>


<!-- -->

</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Python</category>
  <category>Installation</category>
  <category>Getting started</category>
  <guid>https://tommasoghilardi.github.io/posts/general/InstallPython.html</guid>
  <pubDate>Mon, 14 Oct 2024 22:13:04 GMT</pubDate>
  <media:content url="https://tommasoghilardi.github.io/posts/general/Images/Icon.ico" medium="image"/>
</item>
</channel>
</rss>
